<html>

<head>
    <meta name="viewport" content="initial-scale=1.0, width=device-width" />
    <script type="text/javascript" src="https://js.api.here.com/v3/3.1/mapsjs-core.js"></script>
    <script type="text/javascript" src="https://js.api.here.com/v3/3.1/mapsjs-service.js"></script>
    <script type="text/javascript" src="https://js.api.here.com/v3/3.1/mapsjs-ui.js"></script>
    <script type="text/javascript" src="https://js.api.here.com/v3/3.1/mapsjs-mapevents.js"></script>
    <!-- 
    <script type="text/javascript" src='../js-examples-rendering-helpers/iframe-height.js'></script> -->
</head>
</head>

<body>
    <div>
        <p>Found: <%= foundFoodPlace %> </p>
    </div>
    <div style="width: 640px; height: 480px" id="mapContainer">
    </div>
    <script>

        const latitude = 50.05 //'<%= foundFoodPlace.lat %>';
        const longitude = 19.94  // '<%= foundFoodPlace.lng %>';
        const center = { lat: latitude, lng: longitude };

        // Initialize the platform object:
        const platform = new H.service.Platform({
            'apikey': '<%= process.env.GOOGLE_MAPS_APIKEY %>'
        });

        // Obtain the default map types from the platform object
        var defaultLayers = platform.createDefaultLayers();

        // Instantiate (and display) a map object:
        var map = new H.Map(
            document.getElementById('mapContainer'),
            defaultLayers.vector.normal.map,
            {
                zoom: 10,
                center: center
                /*  center: { lat: 50.05, lng: 19.94 }   */
            });

        /*  */

        // Define a variable holding SVG mark-up that defines an icon image:
        var svgMarkup = '<svg width="24" height="24" ' +
            'xmlns="http://www.w3.org/2000/svg">' +
            '<rect stroke="white" fill="#1b468d" x="1" y="1" width="22" ' +
            'height="22" /><text x="12" y="18" font-size="12pt" ' +
            'font-family="Arial" font-weight="bold" text-anchor="middle" ' +
            'fill="white">H</text></svg>';

        var blueMarker = new H.map.Marker({ lat: 50.05, lng: 19.90 });

        /* var infowindow = new H.ui.InfoWindow({
            content: "Jestem content!!!",
            width: 200
        });

        blueMarker.addListener('click', function () {
            infowindow.open(map, blueMarker);
        }); */

        map.addObject(blueMarker);

        // Create an icon, an object holding the latitude and longitude, and a marker:
        var icon = new H.map.Icon(svgMarkup),
            coords = center,
            marker = new H.map.Marker(coords, { icon: icon });

        // Create the default UI components
        var ui = H.ui.UI.createDefault(map, defaultLayers);
        var bubble;
        bubble = new H.ui.InfoBubble({ lat: 50.05, lng: 19.80 }, {
            content: "Jestem bubble"
        });
        ui.addBubble(bubble);
        bubble.open();



        // Add the marker to the map and center the map at the location of the marker:
        map.addObject(marker);
        //map.setCenter(coords);

        //---------------------------- SET INTERACTIVE ---------------

        function setInteractive(map) {
            // get the vector provider from the base layer
            var provider = map.getBaseLayer().getProvider();

            // get the style object for the base layer
            var style = provider.getStyle();

            var changeListener = (evt) => {
                if (style.getState() === H.map.Style.State.READY) {
                    style.removeEventListener('change', changeListener);

                    // enable interactions for the desired map features
                    style.setInteractive(['places', 'places.populated-places'], true);

                    // add an event listener that is responsible for catching the
                    // 'tap' event on the feature and showing the infobubble
                    provider.addEventListener('tap', onTap);
                }
            };
            style.addEventListener('change', changeListener);
        }


        /**
         * @param {H.mapevents.Event} e The event object
         */
        function onTap(evt) {
            // calculate infobubble position from the cursor screen coordinates
            let position = map.screenToGeo(
                evt.currentPointer.viewportX,
                evt.currentPointer.viewportY
            );
            // read the properties associated with the map feature that triggered the event
            let props = evt.target.getData().properties;

            // create a content for the infobubble
            let content = "Im a content bubble";

            /*  let content = 'It is a ' + props.kind + ' ' + (props.kind_detail || '') +
                 (props.population ? 'population: ' + props.population : '') +
                 'local name is ' + props['name'] +
                 (props['name:ar'] ? 'name in Arabic is ' + props['name: ar'] : '') + '';
  */
            // Create a bubble, if not created yet
            if (!bubble) {
                bubble = new H.ui.InfoBubble(position, {
                    content: content
                });
                ui.addBubble(bubble);
            } else {
                // Reuse existing bubble object
                bubble.setPosition(position);
                bubble.setContent(content);
                bubble.open();
            }
        }

        // Now use the map as required...


        setInteractive(map);    
    </script>
</body>

</html>